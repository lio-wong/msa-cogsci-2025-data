<START_SCENARIO>
BACKGROUND
In this event, the athletes are competing in a series of canoe races. In each race, the team that wins depends on the average speed with which the athletes are able to row, based on their intrinsic strength modulated by other factors including how much effort they put in to that race.
Athletes compete either individually or as a team.
All races take place on the same day.

CONDITIONS
Alice is much stronger than Casey.
In the first race, Alice beat Casey.
In the second race, Alice and Ness beat Casey and Max.
In the third race, Max and Alice lost to Casey and Ness.
Both Alice and Max were not trying hard in the third race.
Casey dropped their paddle in the water in the last race they competed in.
Max pulled their shoulder in the last race they competed in.
Alice threw out their back after the second race. 
Casey is a little bit weaker than Ness.
Ness has been suffering from insomnia.
Casey is an inexperienced rower.

QUERIES
Query 1: Out of 100 random athletes, where do you think Alice ranks in terms of intrinsic strength?
Query 2: On a percentage scale from 0 to 100%, how much effort do you think Max put into the third race?
Query 3: In a new race later this same day between Alice and Ness (Team 1) and Max and Taylor (Team 2), who would win and by how much?
Query 4: In a new race later this same day between Max (Team 1) and Ness (Team 2), who would win and by how much?
<END_SCENARIO>

<START_LANGUAGE_TO_WEBPPL_CODE>
// CONDITIONS
// Alice is much stronger than Casey.
 condition(much_stronger({athlete1: 'alice', athlete2: 'casey'}))
// In the first race, Alice beat Casey.
  condition(beat({team1: ['alice'], team2: ['casey'], race: 1}))
// In the second race, Alice and Ness beat Casey and Max.
  condition(beat({team1: ['alice', 'ness'], team2: ['casey', 'max'], race: 2}))
// In the third race, Max and Alice lost to Casey and Ness.
  condition(lost({team1: ['max', 'alice'], team2: ['casey', 'ness'], race: 3}))
// Alice and Max were not trying hard in the third race.
  condition(!tried_hard_in_race({athlete: 'alice', race: 3}) && !tried_hard_in_race({athlete: 'max', race: 3}))
// Casey dropped their paddle in the water in the last race they competed in.
  condition(dropped_paddle_in_water_in_race({athlete: 'casey', race: 3}))
// Max pulled their shoulder in the last race they competed in.
  condition(pulled_shoulder_in_race({athlete: 'max', race: 3}))
// Alice threw out their back after the second race.
  condition(threw_out_back_after_race({athlete: 'alice', race: 2}))
// Casey is a little bit weaker than Ness.
 condition(little_bit_weaker({athlete1: 'casey', athlete2: 'ness'}))
// Ness has been suffering from insomnia.
 condition(suffering_from_insomnia({athlete: 'ness'}))
// Casey is an inexperienced rower.
 condition(inexperienced_rower({athlete: 'casey'}))

// QUERIES
// Query 1: Out of 100 random athletes, where do you think Alice ranks in terms of intrinsic strength?
   intrinsic_strength_rank({athlete: 'alice', out_of_n_athletes: 100})
// Query 2: On a percentage scale from 0 to 100%, how much effort do you think Max put into the third race?
   effort_level_in_race({athlete: 'max', race: 3})
// Query 3: In a new race later this same day between Alice and Ness (Team 1) and Max and Taylor (Team 2), who would win and by how much?
   who_would_win_by_how_much({team1: ['alice', 'ness'], team2: ['max', 'taylor'], race: 4})
// Query 4: In a new race later this same day between Max (Team 1) and Ness (Team 2), who would win and by how much?
  who_would_win_by_how_much({team1: ['max'], team2: ['ness'], race: 5})
<END_LANGUAGE_TO_WEBPPL_CODE>

<START_SCRATCHPAD>
First, let's reason about the role of strength in this scenario.
Intrinsic strength is an underlying attribute of a given athlete that varies somewhat widely from athlete to athlete.

An athlete is much stronger than another if their intrinsic strength is a lot greater than the other.

An athlete is a little bit weaker than another if their intrinsic strength is a little bit less than the other.

An athlete's intrinsic strength ranking out of n other athletes is the number of other athletes we might expect them to be stronger than out of N total random athletes.

An 'inexperienced' rower usually has average or less rowing strength.

Athletes also vary in the effort that they put into any given race. Athletes can put in either moderate amount of effort, little effort, or extra high amounts of effort. Which of these they are more likely to do probably depends on their underlying strength, as stronger athletes are probably more likely to put in extra high effort, and weaker athletes probably tend to be more likely to put in lower amounts of effort.

An athlete who 'tries hard' in a race puts in a fair amount of effort.

Whether or not an athlete drops their paddle in the water in a specific race is quite rare. This is a one time event that affects only that race.

Whether or not an athlete pulls their shoulder during a specific race occurs at rare frequency for any given athlete and race. This is an event that affects future races after the race in which someone was injured. We will need to think about whether an athlete has pulled their shoulder in ANY previous races to understand its effects on the current race.

Whether or not an athlete threw out their back after a specific race occurs at a rare frequency for any given athlete or race. This is also an event that affects future races after the race in which someone was injured. We will need to think about whether an athlete has thrown out their back in ANY previous races to understand its effects on the current race.

Whether any athlete is suffering from insomnia is quite rare. This event is not described as depending on a particular race, and affects the athlete in general.

An athlete's effective rowing speed in a given race is determined at a base level by their intrinsic strength, since stronger athletes row faster. However, we need to carefully take into account all of the factors described. Their effective speed is affected by whether (1) they dropped their paddle only in the specific race under discussion, which slows them a little on average, (2) their effort level, which is effectively a percentage multiplier on their speed in this race; (3) whether they pulled their shoulder in any PREVIOUS race, which will make them quite a bit slower as well, (4) whether they threw out their back in any PREVIOUS race, which will make them much slower, and (5) whether they are suffering from insomnia, which will also make them somewhat slower.

A team's rowing speed in a race is described in the background as the AVERAGE effective speed with which the athletes are able to row on that team.

A canoe team beats another if their team's rowing speed is faster in that race, assuming a fixed race length.

A canoe team loses to another team if they did not beat that team in a given race.

To calculate who would win and by how much, we will calculate the likelihood that a team would win over another.

<START_CONCEPT_TRACE>
- intrinsic_strength
- much_stronger
  - depends on: intrinsic_strength
- little_bit_weaker
  - depends on: intrinsic_strength
- intrinsic_strength_rank
  - depends on: intrinsic_strength
- inexperienced_rower
  - depends on: intrinsic_strength

- effort_level_in_race
  - depends on: intrinsic_strength

- tried_hard_in_race
  - depends on: effort_level_in_race

- dropped_paddle_in_water_in_race

- pulled_shoulder_in_race

- threw_out_back_after_race

- suffering_from_insomnia

- effective_rowing_speed_in_race
  - depends on: intrinsic_strength, pulled_shoulder_in_race, effort_level_in_race, dropped_paddle_in_water_in_race, threw_out_back_after_race, suffering_from_insomnia

- team_rowing_speed_in_race
  - depends on: effective_rowing_speed_in_race
- beat 
  - depends on: team_rowing_speed_in_race
- lost
  - depends on: beat
- who_would_win_by_how_much
  - depends on: lost

<END_CONCEPT_TRACE>
<END_SCRATCHPAD>

<START_WEBPPL_MODEL>
var model = function() {
    // BACKGROUND KNOWLEDGE
    // Intrinsic strength is an underlying attribute of a given athlete that varies somewhat widely from athlete to athlete.
    var intrinsic_strength = mem(function ({athlete}) {
      // Arbitrary measure of strength, variance is somewhat wide.
      var parameter_intrinsic_strength_average = 100;
      var parameter_intrinsic_strength_variance = 20;
      return Math.max(gaussian(parameter_intrinsic_strength_average, parameter_intrinsic_strength_variance), 0)
    })
    
    // An athlete is much stronger than another if their intrinsic strength is a lot greater than the other.
    var much_stronger = function({athlete1, athlete2}) {
      var much_stronger_difference_threshold = 20;
      return intrinsic_strength({athlete: athlete1}) - intrinsic_strength({athlete: athlete2}) > much_stronger_difference_threshold;
    } 
    
    // An athlete is a little bit weaker than another if their intrinsic strength is a little bit less than the other.
    var little_bit_weaker = function({athlete1, athlete2}) {
      var little_bit_weaker_difference_threshold = 10;
      return intrinsic_strength({athlete: athlete2}) > intrinsic_strength({athlete: athlete1}) && intrinsic_strength({athlete: athlete2}) - intrinsic_strength({athlete: athlete1}) < little_bit_weaker_difference_threshold;
    } 

    /// An athlete's intrinsic strength ranking out of n other athletes is the number of other athletes we might expect them to be stronger than out of N total random athletes.
    var intrinsic_strength_rank = function({athlete, out_of_n_athletes}) {
        // Generate out_of_n_athletes - 1 other random athlete IDs
        var random_athlete_ids = mapN(function(x) {return uniform(0, 1000)}, out_of_n_athletes - 1)
        
        // Total number of random other athletes this athlete is stronger than.
        return sum(map(
            function(random_athlete_id) {
              return intrinsic_strength({athlete: athlete}) > intrinsic_strength({athlete: random_athlete_id})}, random_athlete_ids))
    }

    // An 'inexperienced' rower usually has average or less rowing strength.
    var inexperienced_rower = mem(function({athlete}){
      var inexperienced_rower_threshold = 100;
      return intrinsic_strength({athlete: athlete}) < inexperienced_rower_threshold0;
    })

    // Athletes also vary in the effort that they put into any given race. Athletes can put in either moderate amount of effort, little effort, or extra high amounts of effort. Which of these they are more likely to do probably depends on their underlying strength, as stronger athletes are probably more likely to put in extra high effort, and weaker athletes probably tend to be more likely to put in lower amounts of effort.
    var effort_level_in_race = mem(function({athlete, race}) {
      // Prior that an athlete is low, moderately high, or extra high effort on a given round.
      var parameter_low_effort_prior = 
          intrinsic_strength(athlete) > 140 ? 0.05 : // Strong athletes rarely put in little effort 
               intrinsic_strength(athlete) < 90 ?  0.8 : // Weak athletes often put in little effort
                                                     0.2;  // Otherwise generally don't put in little effort
      var parameter_moderate_effort_prior = intrinsic_strength(athlete) > 140 ? 0.15 : // Strong athletes also don't generally put in moderate effort
               intrinsic_strength(athlete) < 90 ?  0.15 : // Weak athletes also don't often put in moderate effort
                                                        0.6; // Medium athletes often do put in moderate effort
      var parameter_extra_high_effort_prior = intrinsic_strength(athlete) > 140 ? 0.8 :  // Strong athletes often put in a lot of effort
               intrinsic_strength(athlete) < 90 ?  0.05 : // Weak athletes rarely put in extra high effort
                                                        0.2; // Otherwise generally don't put in extra high effort

      // How much someone pulls on average if they are pulling with low, moderately high, or extra high effort.
      var low_effort_average = 40; 
      var moderate_effort_average = 60;
      var extra_high_effort_average = 80;
      var effort_variance = 10;
      
     
      var effort_average = categorical({ps: [parameter_low_effort_prior, parameter_moderate_effort_prior, parameter_extra_high_effort_prior], 
      vs: [low_effort_average, moderate_effort_average, extra_high_effort_average]});

      return Math.min(Math.max(gaussian(effort_average, effort_variance), 0), 100)
    })
    
    // An athlete who 'tries hard' in a race puts in a fair amount of effort.
    var tried_hard_in_race = mem(function({athlete, race}) {
      var extra_high_effort_average = 80;
      // Either the player tried hard in a race or not.
      return effort_level_in_race({athlete: athlete, race: race}) > extra_high_effort_average;
    })

    // Whether or not an athlete drops their paddle in the water in a specific race is quite rare. This is a one time event that affects only that race.
    var dropped_paddle_in_water_in_race = mem(function({athlete, race}) {
    var likelihood_of_dropping_paddle_in_water = 0.05;
      return flip(likelihood_of_dropping_paddle_in_water); 
    })

    // Whether or not an athlete pulls their shoulder during a specific race occurs at rare frequency for any given athlete and race. This is an event that affects future races after the race in which someone was injured. We will need to think about whether an athlete has pulled their shoulder in ANY previous races to understand its effects on the current race.
    var pulled_shoulder_in_race = mem(function({athlete, race}) {
        var likelihood_of_pulling_shoulder_in_race = 0.05;
      return flip(likelihood_of_pulling_shoulder_in_race); 
    })

    // Whether or not an athlete threw out their back after a specific race occurs at a rare frequency for any given athlete or race. This is also an event that affects future races after the race in which someone was injured. We will need to think about whether an athlete has thrown out their back in ANY previous races to understand its effects on the current race.
    var threw_out_back_after_race = mem(function({athlete, race}) {
      var likelihood_of_throwing_out_back_after_race = 0.05;
      return flip(likelihood_of_throwing_out_back_after_race);
    })

    // Whether any athlete is suffering from insomnia is quite rare. This event is not described as depending on a particular race, and affects the athlete in general.
    var suffering_from_insomnia = function({athlete}) {
      var likelihood_of_suffering_from_insomnia = 0.05;
      return flip(likelihood_of_suffering_from_insomnia);
    }

    // An athlete's effective rowing speed in a given race is determined at a base level by their intrinsic strength, since stronger athletes row faster. However, we need to carefully take into account all of the factors described. Their effective speed is affected by whether (1) they dropped their paddle only in the specific race under discussion, which slows them a little on average, (2) their effort level, which is effectively a percentage multiplier on their speed in this race; (3) whether they pulled their shoulder in any PREVIOUS race, which will make them quite a bit slower as well, (4) whether they threw out their back in any PREVIOUS race, which will make them much slower, and (5) whether they are suffering from insomnia, which will also make them somewhat slower.
    var effective_rowing_speed_in_race = mem(function({athlete, race}) {
      // Assume that base rowing speed is some constant but noisy transformation of their underlying strength.
      var base_rowing_speed_in_race = intrinsic_strength({athlete : athlete})

      var average_effort = 50;

      var rowing_speed_adjusted_for_effort_level_in_this_race = (effort_level_in_race({athlete: athlete, race: race}) / average_effort) * base_rowing_speed_in_race;

      var rowing_speed_adjusted_for_dropping_paddle_in_this_race = dropped_paddle_in_water_in_race({athlete: athlete, race: race}) ? rowing_speed_adjusted_for_effort_level_in_this_race * 0.8 : rowing_speed_adjusted_for_effort_level_in_this_race;

      var rowing_speed_adjusted_for_pulled_shoulder_in_previous_race = any_previous_time_inclusive(
        function(prev_race) {
          return pulled_shoulder_in_race({athlete: athlete, race: prev_race})
        }, race) ? rowing_speed_adjusted_for_effort_level_in_this_race * 0.8 : rowing_speed_adjusted_for_effort_level_in_this_race;

      var rowing_speed_adjusted_for_threw_out_back_in_previous_race = any_previous_time_inclusive(
        function(prev_race) {
          return threw_out_back_after_race({athlete: athlete, race: prev_race})
        }, race) ? rowing_speed_adjusted_for_pulled_shoulder_in_previous_race * 0.8 : rowing_speed_adjusted_for_pulled_shoulder_in_previous_race;

      var rowing_speed_adjusted_for_suffering_from_insomnia = suffering_from_insomnia({athlete: athlete}) ? rowing_speed_adjusted_for_threw_out_back_in_previous_race * 0.8 : rowing_speed_adjusted_for_threw_out_back_in_previous_race;

      return rowing_speed_adjusted_for_suffering_from_insomnia;
    })
    
    // A team's rowing speed in a race is described in the background as the AVERAGE effective speed with which the athletes are able to row on that team.
    var team_rowing_speed_in_race = function({team, race}) {
      return mean(map(function(athlete) { return effective_rowing_speed_in_race({athlete: athlete, race: race}) }, team))
    }
    
    // A canoe team beats another if their team's rowing speed is faster in that race, assuming a fixed race length.
    var beat = function({team1, team2, race}){
      // Assert that the appropriate team wins
      // Return true if team1 won
      return team_rowing_speed_in_race({team: team1, race: race}) > team_rowing_speed_in_race ({team: team2, race: race})
    }
    
    // A canoe team loses to another team if they did not beat that team in a given race.
    var lost = function({team1, team2, race}){ 
      return !beat({team1: team1, team2: team2, race: race})
    }

    // To calculate who would win and by how much, we will calculate the likelihood that a team would win over another. 
    var who_would_win_by_how_much = function({team1, team2, race}) {
      // 0% is Team 1 would defintiely win, 100% is Team 2 would definitely win, so we will just calculate the likelihood that team 2 would win here.
      // Simulate random possible future races based on random race IDs, starting with the ID of the current race to avoid any races we've seen so far. We'll simulate out of 100 random races.
      var num_future_races_to_simulate = 5;
      
      var random_future_race_ids = mapN(function(x) {return Math.round(uniform(race+1, 20))}, num_future_races_to_simulate);

      // Calculate how many races that team 2 would have won, meaning that team 1 lost.
      var simulated_races_won_by_team_2 = sum(map(
            function(random_future_race_id) {
              return lost({team1: team1, team2: team2, race: random_future_race_id})}, random_future_race_ids))

      // Return the likelihood that team 2 won.
      return simulated_races_won_by_team_2 / num_future_races_to_simulate;
    }
    
    
    // CONDITIONS
    // Alice is much stronger than Casey.
    condition(much_stronger({athlete1: 'alice', athlete2: 'casey'}))
    // In the first race, Alice beat Casey.
    condition(beat({team1: ['alice'], team2: ['casey'], race: 1}))
    // In the second race, Alice and Ness beat Casey and Max.
    condition(beat({team1: ['alice', 'ness'], team2: ['casey', 'max'], race: 2}))
    // In the third race, Max and Alice lost to Casey and Ness.
    condition(lost({team1: ['max', 'alice'], team2: ['casey', 'ness'], race: 3}))
    // Alice and Max were not trying hard in the third race.
    condition(!tried_hard_in_race({athlete: 'alice', race: 3}) && !tried_hard_in_race({athlete: 'max', race: 3}))
    // Casey dropped their paddle in the water in the last race they competed in.
    condition(dropped_paddle_in_water_in_race({athlete: 'casey', race: 3}))
    // Max pulled their shoulder in the last race they competed in.
    condition(pulled_shoulder_in_race({athlete: 'max', race: 3}))
    // Alice threw out their back after the second race.
    condition(threw_out_back_after_race({athlete: 'alice', race: 2}))
    // Casey is a little bit weaker than Ness.
    condition(little_bit_weaker({athlete1: 'casey', athlete2: 'ness'}))
    // Ness has been suffering from insomnia.
    condition(suffering_from_insomnia({athlete: 'ness'}))
    // Casey is an inexperienced rower.
    condition(inexperienced_rower({athlete: 'casey'})) 
    
    // QUERIES
    // Query 1: Out of 100 random athletes, where do you think Alice ranks in terms of intrinsic strength?
    // Query 2: On a percentage scale from 0 to 100%, how much effort do you think Max put into the third race?
    // Query 3: n a new race later this same day between Alice and Ness (Team 1) and Max and Taylor (Team 2), who would win and by how much?
    // Query 4: In a new race later this same day between Max (Team 1) and Ness (Team 2), who would win and by how much?
    return {
        query1: intrinsic_strength_rank({athlete: 'alice', out_of_n_athletes: 100}),
        query2: effort_level_in_race({athlete: 'max', race: 3}),
        query3: who_would_win_by_how_much({team1: ['alice', 'ness'], team2: ['max', 'taylor'], race: 4}),
        query4:  who_would_win_by_how_much({team1: ['max'], team2: ['ness'], race: 5})
    }

}
// Now we run the model and collect an estimate.
var posterior = Infer({model: model, method: "MCMC", samples: 10000});
viz(posterior);
<END_WEBPPL_MODEL>